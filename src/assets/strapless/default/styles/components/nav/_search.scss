// ===========================================
//
//      SEARCH
//      ....................
//      - assumed to be nested within <form>
//      - in order to place search button within search field,
//        we wrap the input and button within the same container and style it to mimic an infput field
//
// ===========================================


// .container

.searchbar {
    display: block;
    width: 100%;
    height: 100%;
    // max-height: $section-height-short;
    // background-color: #eaeaea;
    // margin: auto auto $scale_2;
    .search {
        padding: $scale_2 0;
    }
    .pseudo-search {
        border: 0.2rem solid #eaeaea;
    }
}




//  8. widths
// ************************
//  - for unique search widths, either wrap the search form in .search,
//    or add .search to the form itself
// ************************

.search form,
form.search {
    max-width: $base-max-width;
}


//  8. pseudo-search wrapper
// ************************
//  - to place the search button within and to the right side of the search element
//    we had to simulate the exterior of the ssearch input, to nest everything.
//  - this works out well for keeping code tidy, because the search inputs are getting nested within forms anyway,
//    may as well merge them.
//  - usage:
//
//      <form class="pseudo-search">
//          <input type="search">
//          <label>
//              <select>
//          <label>
//              <select>
//          <button>
//      </form>
//
// ************************

.pseudo-search {

    display: flex;
    // TODO: non-flex fallback
    // @include span(12 of 12);
    border: 0.2rem solid $wht; // $gry
    background: transparent;

    @include anim($global-animation);
    & > * {@include anim($global-animation);}

    @media #{$medium-down} { display: block; @include clear(); }

    //  forces equal heights - TODO: improve this
    // ************************
    input[type="search"], button, select, select > option { max-height: 3.157rem + $base-horizontal-small; }
    input[type="search"], button, select > option { min-height: 3.157rem + $base-horizontal-small; }
    select > option { line-height: 3.157rem  + $base-horizontal-small; vertical-align: middle; }

    // search input
    // ************************
    & > input[type="search"] {
        margin: auto;
        padding: 1rem $base-vertical;
        border:0;
        color: $placholderTextcolor; // $gry
        background-color: transparent;
        &:active, &:active:hover,
        &:focus, &:focus:active {background-color: $wht; color: $slate;}
        @media #{$medium-down} { @include span(12 of 12); }
    }

    // search button
    // ************************
    button,
    .search-button {
        padding: 1em $base-vertical;
        margin: auto 0;
        border: none;
        background: transparent;
        cursor: pointer;
        color: $placholderTextcolor;
        @include hover() { color: $slate; background: $wht; } // color: $wht; background-color:$slate;
        @media #{$medium-only} { @include span(4 of 12 last no-gutters); width: 33.3333333%; }
        @media #{$small-only} { width: 20%; }
    }

    select {
        @include clear();
        @include span(4 of 12);
        border: 0;
        margin: 0 auto;
        padding: 0;
        text-align: center;
        background-color: transparent;
        color: $placholderTextcolor;

        // each dropdown item
        & > option {
            color: $slate;
            background-color: transparent;
            &:disabled {color: $placholderTextcolor;} // work around for placeholder
        }

        // IE - hides default dropdown arrows
        select::-ms-expand {display: none;}

        @include triangle($placholderTextcolor);
        background-position: 80% 50%;

        @media #{$medium-down} { @include span(4 of 12 no-gutters);  width: 33.3333333%; }
        @media #{$medium-only} { padding-left: $base-vertical; text-align: left; }
        @media #{$small-only} {width: 40%; text-align: left; padding-left: $base-vertical; }

    }

    //  hover / focus backgrounds
    // *****************************
    //  - uses input states to trigger adjacent labels and button to also
    //    have a white background when the search input has focus
    // *****************************

    // hover and focus states
    // ************************
    //  - when hovering over .psuedo-search, styles for select and the button
    &:focus input ~ select,
    &:hover input ~ select,
    input[type="search"]:focus ~ button.fa,
    input[type="search"]:checked ~ button.fa,
    input[type="search"]:active ~ button.fa {
        background-color:$wht;
        color: $placholderTextcolor;
        border-color: #252525;
        @include hover() { color: $slate; &.fa {color: $slate;} }
    }

    // when the search input has focus, it will styles the select dropdowns
    input[type="search"]:focus ~ select,
    input[type="search"]:checked ~ select,
    input[type="search"]:active ~ select {
        background-color:$wht;
        color: $placholderTextcolor;
        @include triangle($slate);
        background-position: 80% 50%;
        @include hover() { color: $slate; @include triangle($slate); background-position: 80% 50%; }
    }

    // when the wrapper element is hovered, applies unified styles throughout
    // ************************************************************************
    @include hover() {
        color: $placholderTextcolor;
        border-color: #252525;
        background: $wht;
        select  {
            color: $placholderTextcolor;
            background-color: $wht;
            @include triangle($slate);
            background-position: 80% 50%;
            @include hover() { @include triangle($slate); background-position: 80% 50%; }
        }
        input[type="search"] { color: $slate; }
    }

}











// CODYHOUSE Search overlay



// edit font rendering -> tip: use for light text on dark backgrounds
@mixin fontSmooth {
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

// crop top space on text elements - caused by line height
@mixin lhCrop($line-height, $capital-letter: 1) {
  &::before {
    content: '';
    display: block;
    height: 0;
    width: 0;
    margin-top: calc((#{$capital-letter} - #{$line-height}) * 0.5em);
  }
}

// CSS triangle
@mixin triangle ($direction: up, $width: 12px, $color: red) {
  width: 0;
  height: 0;
  border: $width solid transparent;

  @if( $direction == left ) {
    border-right-color: $color;
  } @else if( $direction == right ) {
    border-left-color: $color;
  } @else if( $direction == down ) {
    border-top-color: $color;
  } @else {
    border-bottom-color: $color;
  }
}

// reset user agent style
@mixin reset {
  background-color: transparent;
  padding: 0;
  border: 0;
  border-radius: 0;
  color: inherit;
  line-height: inherit;
  appearance: none;
}

// --------------------------------

// Color functions

// --------------------------------

// define HSL color variable
@mixin defineColorHSL($color, $hue, $saturation, $lightness){
  #{$color}: unquote("hsl(#{$hue}, #{$saturation}, #{$lightness})");#{$color}-h: #{$hue};#{$color}-s: #{$saturation};#{$color}-l: #{$lightness};
}

// return color with different opacity value
@function alpha($color, $opacity){
  $color: str-replace($color, 'var(');
  $color: str-replace($color, ')');
  $color-h: var(#{$color+'-h'});
  $color-s: var(#{$color+'-s'});
  $color-l: var(#{$color+'-l'});
  @return hsla($color-h, $color-s, $color-l, $opacity);
}

// return color with different lightness value
@function lightness($color, $lightnessMultiplier){
  $color: str-replace($color, 'var(');
  $color: str-replace($color, ')');
  $color-h: var(#{$color+'-h'});
  $color-s: var(#{$color+'-s'});
  $color-l: var(#{$color+'-l'});
  @return hsl($color-h, $color-s, calc(#{$color-l} * #{$lightnessMultiplier}));
}

// replace substring with another string
// credits: https://css-tricks.com/snippets/sass/str-replace-function/
@function str-replace($string, $search, $replace: '') {
  $index: str-index($string, $search);
  @if $index {
    @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
  }
  @return $string;
}

// --------------------------------

// Edit Units

// --------------------------------

@mixin spaceUnit($space-unit) { // edit the space unit on a component level
  --space-unit:  #{$space-unit};
  --space-xxxxs: calc(0.125 * #{$space-unit});
  --space-xxxs:  calc(0.25 * #{$space-unit});
  --space-xxs:   calc(0.375 * #{$space-unit});
  --space-xs:    calc(0.5 * #{$space-unit});
  --space-sm:    calc(0.75 * #{$space-unit});
  --space-md:    calc(1.25 * #{$space-unit});
  --space-lg:    calc(2 * #{$space-unit});
  --space-xl:    calc(3.25 * #{$space-unit});
  --space-xxl:   calc(5.25 * #{$space-unit});
  --space-xxxl:  calc(8.5 * #{$space-unit});
  --space-xxxxl: calc(13.75 * #{$space-unit});
  --component-padding: var(--space-md);
}

@mixin textUnit($text-unit, $text-scale-ratio: 1.2) { // edit the text unit and the type scale on a component level
  --text-xs: calc((#{$text-unit} / #{$text-scale-ratio}) / #{$text-scale-ratio});
  --text-sm: calc(var(--text-xs) * #{$text-scale-ratio});
  --text-md: calc(var(--text-sm) * #{$text-scale-ratio} * #{$text-scale-ratio});
  --text-lg: calc(var(--text-md) * #{$text-scale-ratio});
  --text-xl: calc(var(--text-lg) * #{$text-scale-ratio});
  --text-xxl: calc(var(--text-xl) * #{$text-scale-ratio});
  --text-xxxl: calc(var(--text-xxl) * #{$text-scale-ratio});
  font-size: $text-unit;
}











:root, [data-theme="default"] {
  // main
  @include defineColorHSL(--color-primary-darker, 220, 90%, 36%);
  @include defineColorHSL(--color-primary-dark, 220, 90%, 46%);
  @include defineColorHSL(--color-primary, 220, 90%, 56%);
  @include defineColorHSL(--color-primary-light, 220, 90%, 66%);
  @include defineColorHSL(--color-primary-lighter, 220, 90%, 76%);

  // black + white
  @include defineColorHSL(--color-black, 240, 8%, 12%);
  @include defineColorHSL(--color-white, 0, 0%, 100%);

  // color contrasts
  @include defineColorHSL(--color-bg, 0, 0%, 100%);
  @include defineColorHSL(--color-contrast-lower, 0, 0%, 95%);
  @include defineColorHSL(--color-contrast-low, 240, 1%, 83%);
  @include defineColorHSL(--color-contrast-medium, 240, 1%, 48%);
  @include defineColorHSL(--color-contrast-high, 240, 4%, 20%);
  @include defineColorHSL(--color-contrast-higher, 240, 8%, 12%);
}

[data-theme] {
  background-color: var(--color-bg);
  color: var(--color-contrast-high);
}

[data-theme="dark"] {
	@supports(--css: variables) {
		-webkit-font-smoothing: antialiased;
		-moz-osx-font-smoothing: grayscale;
		/* color primary */
		@include defineColorHSL(--color-primary-darker, 355, 80%, 44%);
  @include defineColorHSL(--color-primary-dark, 355, 80%, 54%);
  @include defineColorHSL(--color-primary, 355, 90%, 61%);
  @include defineColorHSL(--color-primary-light, 355, 90%, 68%);
  @include defineColorHSL(--color-primary-lighter, 356, 89%, 93%);
		/* color contrast */
		@include defineColorHSL(--color-bg, 240, 8%, 12%);
  @include defineColorHSL(--color-contrast-lower, 240, 5%, 18%);
  @include defineColorHSL(--color-contrast-low, 240, 3%, 27%);
  @include defineColorHSL(--color-contrast-medium, 240, 1%, 57%);
  @include defineColorHSL(--color-contrast-high, 0, 0%, 89%);
  @include defineColorHSL(--color-contrast-higher, 0, 0%, 100%);
	}
}

[data-theme="soft"] {
	@supports(--css: variables) {
		/* color primary */
		@include defineColorHSL(--color-bg, 221, 78%, 93%);
  @include defineColorHSL(--color-contrast-lower, 222, 46%, 88%);
  @include defineColorHSL(--color-contrast-low, 222, 20%, 77%);
  @include defineColorHSL(--color-contrast-medium, 223, 6%, 45%);
  @include defineColorHSL(--color-contrast-high, 231, 7%, 19%);
  @include defineColorHSL(--color-contrast-higher, 240, 8%, 12%);
	}
}







/* --------------------------------

File#: _2_full-screen-search
Title: Full Screen Search
Descr: A full-screen window w/ a search input element
Usage: codyhouse.co/license

-------------------------------- */

:root {
  --fs-search-btn-size: 3em;
  --fs-search-border-bottom-width: 2px;
}

.modal--search {
  background-color: alpha(var(--color-bg), 0.95);

  .modal__close-btn {
    background-color: var(--color-contrast-lower);

    .icon {
      color: var(--color-contrast-high);
    }

    &:hover {
      background-color: var(--color-contrast-low);
    }
  }
}

.full-screen-search {
  position: relative;
  width: calc(100% - 2*var(--component-padding));
  max-width: var(--max-width-sm);
  background-image: linear-gradient(transparent calc(100% - var(--fs-search-border-bottom-width) * 2), var(--color-contrast-low) calc(100% - var(--fs-search-border-bottom-width) * 2), var(--color-contrast-low) calc(100% - var(--fs-search-border-bottom-width)), transparent var(--fs-search-border-bottom-width)); // border bottom
}

.full-screen-search__input {
  background: transparent; // reset
  font-size: var(--text-xl);
  width: 100%;
  padding: var(--space-sm) var(--fs-search-btn-size) var(--space-sm) var(--space-xs);
  background-image: linear-gradient(transparent calc(100% - var(--fs-search-border-bottom-width) * 2), var(--color-primary) calc(100% - var(--fs-search-border-bottom-width) * 2), var(--color-primary) calc(100% - var(--fs-search-border-bottom-width)), transparent var(--fs-search-border-bottom-width)); // border bottom
  background-size: 0% 100%;
  background-repeat: no-repeat;

  &:focus {
    outline: none;
    background-size: 100% 100%;
  }
}

.full-screen-search__input::-webkit-search-decoration,
.full-screen-search__input::-webkit-search-cancel-button,
.full-screen-search__input::-webkit-search-results-button,
.full-screen-search__input::-webkit-search-results-decoration {
  display: none;
}

.full-screen-search__btn {
  position: absolute;
  top: calc(50% - 1.5em);
  right: var(--space-xs);
  height: var(--fs-search-btn-size);
  width: var(--fs-search-btn-size);
  background-color: var(--color-primary);
  border-radius: 50%;
  display: flex;
  justify-content: center;
  align-items: center;

  .icon {
    display: block;
    color: var(--color-white);
    width: 1.25em;
    height: 1.25em;
    transition: transform .2s;
  }

  &:hover {
    .icon {
      transform: scale(1.1);
    }
  }
}

// animation = on
.modal--search[data-animation="on"] {
  .full-screen-search__input {
    transition: background-size .3s;
  }

  .full-screen-search__btn {
    transform: translateY(100%) scale(0.6);
    opacity: 0;
  }

  &.modal--is-visible {
    .full-screen-search__btn {
      animation: full-screen-search__btn .3s forwards var(--ease-out);
    }
  }
}

@keyframes full-screen-search__btn {
  to {
    transform: translateY(0) scale(1);
    opacity: 1;
  }
}





/* --------------------------------

File#: _1_modal-window
Title: Modal Window
Descr: A modal dialog used to display critical information
Usage: codyhouse.co/license

-------------------------------- */

:root {
  // close button
  --modal-close-btn-size: 1.25em;
  --modal-close-btn-padding: var(--space-sm);
}

.modal {
  position: fixed;
  z-index: var(--zindex-overlay);
  width: 100%;
  height: 100%;
  left: 0;
  top: 0;
  display: flex;
  justify-content: center;
  align-items: center;
  background-color: alpha(var(--color-contrast-higher), 0.9);
  // hide element
  opacity: 0;
  visibility: hidden;
}

.modal--is-visible {
  opacity: 1;
  visibility: visible;
}

.modal__content {
  border-radius: var(--radius-md);
  overflow: auto;
  width: calc(100% - 2*var(--component-padding));
  max-height: calc(100vh - 4*(var(--modal-close-btn-size) + var(--modal-close-btn-padding)));
  background-color: var(--color-bg);
}

.modal__header {
  padding: var(--space-sm) var(--component-padding);
  background-color: var(--color-contrast-lower);
  // align title and icon (if icon is placed inside header)
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.modal__body {
  height: 100%;
  padding: var(--space-sm) var(--component-padding);
}

.modal__footer {
  padding: var(--component-padding);
}

.modal__close-btn {
  position: fixed;
  top: var(--space-sm);
  right: var(--space-sm);
  z-index: var(--zindex-fixed-element);
  padding: var(--modal-close-btn-padding);
  border-radius: 50%;
  background-color: alpha(var(--color-contrast-higher), 0.8);

  &:hover {
    background-color: var(--color-contrast-higher);
  }

  .icon {
    display: block;
    color: var(--color-bg);
    width: var(--modal-close-btn-size);
    height: var(--modal-close-btn-size);
  }
}

// if close btn is inside content (e.g, inside header)
.modal__content {
  .modal__close-btn { // alt close btn style (if inside modal content)
    --modal-close-btn-size: 1em;
    --modal-close-btn-padding: 0.5em;
    position: static;
    flex-shrink: 0;
    background-color: var(--color-bg);
    box-shadow: var(--shadow-sm);
    transition: .2s;

    .icon {
      color: inherit;
    }

    &:hover {
      box-shadow: var(--shadow-md);

      .icon {
        color: var(--color-contrast-higher);
      }
    }
  }
}

// close btn sticky within content
.modal__content {
  .modal__close-btn--sticky {
    position: sticky;
    float: right;
    top: 0;
    right: 0;
  }
}

// --header-is-fixed
.modal--header-is-fixed {
  .modal__header {
    position: sticky;
    top: 0;
  }
}

// --footer-is-fixed
.modal--footer-is-fixed {
  .modal__footer {
    position: sticky;
    bottom: 0;
    background: var(--color-bg);
    box-shadow: var(--shadow-sm);
  }
}

// if animation = enabled
.modal[data-animation="on"] {
  transition: opacity .3s, visibility .3s;

  .modal__content {
    will-change: transform;
    transition: transform .3s var(--ease-out);
    transform: translateY(10%);
  }

  &.modal--is-visible .modal__content {
    transform: translateY(0);
  }
}
